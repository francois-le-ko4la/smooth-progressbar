classDiagram
  class TextIOWrapper {
    close()
    detach()
    fileno()
    flush()
    isatty()
    read()
    readable()
    readline()
    readlines()
    reconfigure()
    seek()
    seekable()
    tell()
    truncate()
    writable()
    write()
    writelines()
  }
  class _IOBase {
    close()
    fileno()
    flush()
    isatty()
    readable()
    readline()
    readlines()
    seek()
    seekable()
    tell()
    truncate()
    writable()
    writelines()
  }
  class _TextIOBase {
    close()
    detach()
    fileno()
    flush()
    isatty()
    read()
    readable()
    readline()
    readlines()
    seek()
    seekable()
    tell()
    truncate()
    writable()
    write()
    writelines()
  }
  class RLock {
    acquire()
    release()
  }
  class deque {
    iterable : list
    maxlen : int
    append(x)
    appendleft(x)
    clear()
    copy()
    count(x)
    extend(iterable)
    extendleft(iterable)
    index(x, start, end)
    insert(i, x)
    pop()
    popleft()
    remove(value)
    reverse()
    rotate(n)
  }
  class date {
    day
    month
    year
    ctime()
    fromisocalendar(year, week, day)
    fromisoformat(date_string)
    fromordinal(n)
    fromtimestamp(t)
    isocalendar()
    isoformat()
    isoweekday()
    replace(year, month, day)
    strftime(fmt)
    timetuple()
    today()
    toordinal()
    weekday()
  }
  class datetime {
    fold
    hour
    microsecond
    minute
    second
    tzinfo
    astimezone(tz)
    combine(date, time, tzinfo)
    ctime()
    date()
    dst()
    fromisoformat(date_string)
    fromtimestamp(t, tz)
    isoformat(sep, timespec)
    now(tz)
    replace(year, month, day, hour, minute, second, microsecond, tzinfo)
    strptime(date_string, format)
    time()
    timestamp()
    timetuple()
    timetz()
    tzname()
    utcfromtimestamp(t)
    utcnow()
    utcoffset()
    utctimetuple()
  }
  class Enum {
    name()
    value()
  }
  class Theme {
    name
  }
  class Console {
    size
    addmsg(msg: str) Console
    addtab() Console
    emptyline() Console
    goback() Console
    newline() Console
    print() None
  }
  class ConsolePrgBr {
    progress_label : str
    size_widgt_label_label : int
    size_widgt_percent : int
    get() str
    update(size: int, percent: Percent, msg: str, elapse: str) ConsolePrgBr
  }
  class ConsoleProgress {
    max_size
    tag_beg : str
    tag_end : str
    text
    update(size: int, ratio: float) ConsoleProgress
  }
  class ConsoleString {
    current_text_size
    enable
    max_size
    max_size : int
    max_text_size
    tag_beg : str
    tag_end : str
    tag_size
    text : str
    align_left() ConsoleString
    align_right() ConsoleString
    update(text: Optional[str], max_size: Optional[int], tag_beg: Optional[str], tag_end: Optional[str]) ConsoleString
  }
  class ElapseTime {
    start() None
  }
  class MultiThread {
    func
    run() None
    stop() None
  }
  class Percent {
    part
    part : int
    value
    whole
  }
  class SmoothProgressBar {
    msg
    start(max_value: int) None
    stop() None
    update(value: int, msg: str) None
  }
  class Condition {
    acquire
    release
    notify(n)
    notifyAll()
    notify_all()
    wait(timeout)
    wait_for(predicate, timeout)
  }
  class Event {
    clear()
    isSet()
    is_set()
    set()
    wait(timeout)
  }
  class Thread {
    daemon
    daemon
    ident
    name
    name
    native_id
    getName()
    isDaemon()
    is_alive()
    join(timeout)
    run()
    setDaemon(daemonic)
    setName(name)
    start()
  }
  class Timer {
    args : list, NoneType
    finished
    function
    interval
    kwargs : dict, NoneType
    cancel()
    run()
  }
  class _RLock {
    acquire(blocking, timeout)
    release()
  }
  class lock {
    acquire(blocking, timeout)
    locked()
    release()
  }
  TextIOWrapper --|> _TextIOBase
  _TextIOBase --|> _IOBase
  datetime --|> date
  Theme --|> Enum
  ConsoleProgress --|> ConsoleString
  MultiThread --|> Thread
  Timer --|> Thread
  TextIOWrapper --* Thread : _stderr
  RLock --* Condition : _lock
  deque --* Condition : _waiters
  datetime --* ElapseTime : __start_time
  datetime --* ElapseTime : __update_time
  Console --* SmoothProgressBar : __console
  ConsolePrgBr --* SmoothProgressBar : __prgbr
  ConsoleProgress --* ConsolePrgBr : __widgt_progress
  ConsoleString --* ConsolePrgBr : __widgt_label
  ConsoleString --* ConsolePrgBr : __widgt_percent
  ConsoleString --* ConsolePrgBr : __widgt_elapse
  ConsoleString --* ConsolePrgBr : __widgt_msg
  ElapseTime --* SmoothProgressBar : __elapse
  MultiThread --* SmoothProgressBar : __mthr
  Percent --* SmoothProgressBar : __percent
  Percent --* SmoothProgressBar : __percent
  Condition --* Event : _cond
  Event --* Thread : _started
  Event --* Timer : finished
  Timer --* MultiThread : __timer
  Timer --* MultiThread : __timer
  _RLock --* Condition : _lock
  lock --* SmoothProgressBar : __lock
