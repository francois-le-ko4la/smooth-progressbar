from _typeshed import Incomplete
from typing import Optional

class ConsoleString:
    text: Incomplete
    tag_beg: Incomplete
    tag_end: Incomplete
    def __init__(self, text: str, max_size: int = ..., tag_beg: str = ..., tag_end: str = ..., enable: bool = ...) -> None: ...
    @property
    def enable(self) -> bool: ...
    @property
    def max_size(self) -> int: ...
    @max_size.setter
    def max_size(self, value: int) -> None: ...
    @property
    def tag_size(self) -> int: ...
    @property
    def max_text_size(self) -> int: ...
    @property
    def current_text_size(self) -> int: ...
    def align_left(self) -> ConsoleString: ...
    def align_right(self) -> ConsoleString: ...
    def update(self, text: Optional[str] = ..., max_size: Optional[int] = ..., tag_beg: Optional[str] = ..., tag_end: Optional[str] = ...) -> ConsoleString: ...
    def __len__(self) -> int: ...
